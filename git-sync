#!/bin/sh

# Utility functions:

# Use fd 3 for logging, default stderr.
exec 3>&-
exec 3>&2
log() { echo "$*" >&3 ; }
die() { log "$*" ; exit 7 ; }

verbose=false
bugme() {
   $verbose || return
   log "$@"
}
debug_flag=false
debug() {
   $debug_flag || return
   log "$@"
}

quiet=false
[ "$GIT_SYNC_QUIET" ] && quiet=true

note() {
   $quiet && return
   log "$@"
}
git() {
   local rc
   debug "git $*"
   command git "$@" ; rc=$?
   [ $rc -eq 0 ] || debug "		git rc=$rc"
   return $rc
}

#parms: config var [default]
read_gitconfig() {
  [ $# -eq 2 -o $# -eq 3 ] || die "read_gitconfig internal error $*"

  local c
  if c=`command git config --get "$1"` ; then
     debug "read $1 = $c"
     eval "$2='$c'"
  elif [ "$3" ]; then
     debug "read $1 (unset) default '$3'"
     eval "$2='$3'"
  else
     debug "read $1 (unset)"
     eval "$2="
  fi
}

mergehead="$git_dir/MERGE_HEAD"
exit_unmerged() {
  [ -f "$mergehead" ] && die "finish or abort merge before doing sync (again)."
  # There are a bunch of in-progress states which whe should
  # probably resolve before attempting a sync
  local d=$git_dir
  [ -d "$d/rebase-apply" ] && die "finish rebase(apply) before syncing"
  [ -d "$d/rebase-merge" ] && die "finish rebase(merge) before syncing"
  [ -f "$d/CHERRY_PICK_HEAD" ] && die "finish cherry-pick before syncing"
  [ -f "$d/BISECT_LOG" ] && die "finish bisect before syncing"
}

#parms: remote
# Check if a 'local' repo is missing.
# Return true if the provided remote is 'local' and
# is is not available.
# Returns $local_url by side-effect.
#
local_but_missing() {
   read_gitconfig remote.$1.url local_url
   case "$local_url" in ../*|/*)
      # url is a local to this host
      [ -e "$local_url/.git" ] && return 1	# not missing
      [ -d "$local_url/refs" ] && return 1	# not missing
      return 0	# local, but missing
   esac
   return 1	# not local
}

# String scanner. Return true if a equals b...
#parms: a b [b....]
scan() {
 local a="$1"
 shift
 while [ "$1" ] ; do
   [ "$a" = "$1" ] && return 0
   shift
 done
 return 1
}
usage() {
   echo "git-sync [-v|-d|-q|-p]"
   echo "	-v == verbose output"
   echo "	-d == debug output"
   echo "	-q == quiet, minimal output"
   echo "	-p == push (even when automatic push disabled)"
   exit 1
}

#
# It is also possible to have a repo that pulls but does not push
# for some time. That is, it pulls, but does not push by default.
# To configure this, do: git config sync.push false
# Then, when you are ready to push, you would do: git sync -p
#
# Note that push to internal synced/{branch} will occur even
# if allow_push is false, because this allows remote repos
# to pull from this repo.
#
read_gitconfig sync.push allow_push true

remotes=
while [ $# -gt 0 ]; do
  case "$1" in
  -v)	verbose=true ; quiet=false	;;
  -q)	quiet=true ; verbose=false	;;
  -d)	debug_flag=true ; verbose=true ; quiet=false ;;
  -p)	allow_push=true
	note "Override to push"	;;
  -*)	log "unknown option '$1'" ; usage	;;
  *)	break
  esac
  shift
done

remotes="$*"

case "$allow_push" in true) ;;
false)	note "Push suppressed by sync.push false. Use -p to force push" ;;
*)	die "Invalid value for configuration sync.push '$allow_push'"
esac

# Control the amount of git output
oflag='-q'
$verbose && oflag='-v'

git_dir=`git rev-parse --git-dir`

# For now, exclude local repo where git-annex is active.
# Not sure what the interactions are.
if [ -d "$git_dir/annex" ]; then
   log "Found $git_dir/annex/"
   log "Note that while git-sync may be configured to sync with remote"
   log "repos using git annex, I don't recommend it being used on the same"
   log "working repo where git-annex is active."
   die "cannot continue"
fi

exit_unmerged

# The list of remotes to sync can be configured in
# sync.remotes or, all remotes will be considerred.
#
if [ "$remotes" ]; then
   note "syncing remote: $remotes"
else
   read_gitconfig sync.remotes remotes
   if [ "$remotes" ]; then
	note "sync.remotes: $remotes"
   else
	remotes=`git remote`
   fi
fi

mybranch=`git rev-parse --abbrev-ref HEAD`

# Check rebase settings and warn, since git-sync uses
# merge rather than rebase:
#
read_gitconfig branch.$mybranch.rebase rb
[ "$rb" ] && case "$rb" in no|false) ;;
*)	note "branch.$mybranch.rebase=$rb but git-sync always uses merge"
esac

read_gitconfig branch.autoSetupRebase asr
[ "$asr" ] && case "$asr" in false|no|never) ;;
*)	note "branch.autoSetupRebase=$asr but git-sync always uses merge"
esac

# For compatibility with annex, we also do a local sync to
# branch refs/heads/synced/$mybranch
# TODO: Figure out if we should skip local synced/ if we are in a bare repo,
#	or, in a bare repo, and, the synced/$mybranch does not already exist.
git pull $oflag . synced/$mybranch
exit_unmerged

# The meaning of allow_push is now adjusted to indicate
# push is allowed to *external* repo. Even if $allow_push
# is false, we will do a push to synced/{branch}, in order
# that pulls from remote repos will work.
git push $oflag . $mybranch:synced/$mybranch

read_gitconfig branch.$mybranch.sync mymerge
if [ "$mymerge" ]; then
   note "syncing remote branch: $mymerge"
else
   read_gitconfig branch.$mybranch.merge mymerge
   mymerge=${mymerge#refs/heads/}
   if [ "$mymerge" ]; then
      bugme "default merge for '$mybranch' is '$mymerge'"
   else
      read_gitconfig push.default pushdefault
      case "$pushdefault" in current)
         mymerge="$mybranch" ;;
      *)
         note "No default merge for '$mybranch' push.default='$pushdefault'"
      esac
   fi
fi

pushall() {
  local r s b n le syncto
  for r in $remotes ; do
    # Allow config remote.$r.sync to override the merge branch
    # or disable merge by setting NONE. Also, there is an
    # override allowed per-branch-per-remote.
    #
    read_gitconfig branch.$mybranch.$r-sync s
    [ "$s" ] || read_gitconfig remote.$r.sync s
    # Allow sync to be disabled per remote or remote+branch
    [ "$s" = NONE ] && continue

    if local_but_missing $r ; then
       note "$r ($local_url) is not available)"
       continue
    fi
    $allow_push || continue

    # Handle old configuration where I configured:
    #	remote.{name}.sync synced/master
    #
    # I changed that config to mean just a prefix because
    # it may apply to multiple branches.
    #
    if [ "$s" = "synced/master" ]; then
       echo "Old config warning. Don't config synced/master, just synced"
       git config -l | fgrep --color synced/master
       s=synced
    fi
    # Allow push to be disabled, per-remote
    syncto=remote.$r.syncto
    read_gitconfig $syncto n
    if [ "$n" = no ]; then
       note "remote '$r' push excluded (config $syncto)"
       continue
    fi
    if [ "$s" ]; then
       b=$s/$mybranch
    else
       b=$mymerge
       if [ -z "$b" ]; then
          note "Can't push '$mybranch' to '$r'. No upstream branch configured."
          continue
       fi
    fi
    lg=$git_dir/$r.push.log
    le=$git_dir/$r.push.err
    if git push --porcelain $r $mybranch:$b > $lg 2> $le ; then
       $verbose && cat $le >&3
    else
       # $verbose && cat $le
       rc=$?
       local c dcb=false
       # c=`wc $le`
       grep -q "remote rejected.*checked out" $lg && dcb=true
       if $dcb ; then
          note
          log "The remote repo '$r' denied the push to branch $b"
          note "because there is a working tree active on that branch."
          case "$b" in synced*) ;;
          *)
             note "When pushing to a remote with a working tree, we typically use the"
             note "the same approach as git-annex and push to synced/{current-branch}"
             note "To configure this for all remotes:"
             note "	git config branch.$mybranch.sync synced/$mybranch"
             note "or,"
             note "To configure this for only remote '$r':"
             note "	git config remote.$r.sync synced"
             note "or,"
             note "To configure only for this branch ($mybranch) on remote '$r':"
             note "	git config branch.$mybranch.$r-sync synced"
             note "or, to disable sync for remote '$r':"
             note "	git config remote.$r.sync NONE"
          esac
          note
       else
          log "failed(rc=$rc): push $r $mybranch:$b"
          note "To disable git-sync pushing to remote '$r', do:"
          note "	git config $syncto no"
          note "or:	git config remote.$r.sync NONE"
          cat $lg $le >&3
       fi
    fi
  done
}

pullall() {
  local r s m syncfrom sync
  # fetch remotes
  # git remote update

  for r in $remotes ;  do
    exit_unmerged

    # Allow remote branch override based on remote
    # or remote+branch
    #
    sync=branch.$mybranch.$r-sync
    read_gitconfig $sync s
    if [ -z "$s" ]; then
       sync=remote.$r.sync
       read_gitconfig $sync s
    fi

    # Handle old config that indicates synced/{branch} rather than
    # just synced
    #
    if [ "$s" = "synced/master" ]; then
       #echo "Old config warning. Don't config synced/master, just synced"
       #git config -l | fgrep --color synced/master
       s=synced
    fi

    # Allow sync to be disabled for a remote.
    if [ "$s" = NONE ]; then
       note "remote '$r' excluded (config $sync)"
       continue
    else
       # Allow pull to be disabled for a remote.
       syncfrom=remote.$r.syncfrom
       read_gitconfig $syncfrom n
       if [ "$n" = no ]; then
          note "remote $r pull excluded (config $syncfrom)"
          continue
       fi
    fi
    local_but_missing $r && continue

    if [ "$s" ]; then
       # By pulling only synced/{branch} we are assuming that the remote
       # must also run git-sync in order to publish branches after commit.
       # - we could have a hook reminding user to sync.
       # Another option is to fetch/merge both synced/{branch} and {branch}
       # - this might solve the problem where the user commits, but
       #   forgets to push or sync, but, it could cause unfinished
       #   work to be included.
       #   - specifically, often I amend my last commit before I do git sync
       #   - I might want to rebase or squash on synced/{branch}
       m=$s/$mybranch
    else
       m=$mymerge
       if [ -z "$m" ]; then
          note "Can't merge from '$r' to '$mybranch'. No upstream branch configured."
          note " - you might need: git config branch.$mybranch.merge refs/heads/$mybranch"
          note "   even if you don't have a real upstream."
          note " - if this repo uses ONLY git-sync to other non-bare repos, then you"
          note "   can instead do: git config branch.$mybranch.sync synced/$mybranch"
          continue
       fi
    fi

    # In the case of a remote with many branches, we really don't
    # need to fetch *all* the branches here. We fetch only the
    # branch we want to merge ($m). If necessary, I could create
    # a configuration flag remote.{name}.sync-fetch-all
    # or sync.fetch-all in order to fetch all branches.
    #
    if git fetch $oflag $r $m ; then
       :
    else
       note "fetch '$m' from remote '$r' failed."
       note "	This is not an error if git-sync has not been used on that remote before."
       note "To stop git-sync fetching and merging from remote '$r', do:"
       note "		git config $syncfrom no"
       note "or:	git config remote.$r.sync NONE"
    fi
    debug "s='$s' m='$m' r='$r' mybranch='$mybranch' mymerge='$mymerge'"
    git merge $oflag $r/$m || log "failed (rc=$?): merge $r/$m"
  done
}

#echo "git_dir=$git_dir"
#echo "mybranch=$mybranch"
#echo "remotes='$remotes'"
#echo "mymerge=$mymerge"

pullall
exit_unmerged
pushall
